#!@PYTHON@

# gwe-agent
#
# Copyright (C) 2024 Roberto Leinardi <roberto@leinardi.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
from pynvml import *
from ctypes import *

nvmlInit()

# Nvidia doesn't know how to make proper python bindings so we do it for them
def DeviceSetClockOffsets(device, ctype, pstate, offset):
    c_clockOffsetsInfo = pynvml.c_nvmlClockOffset_t()
    c_clockOffsetsInfo.version = pynvml.nvmlClockOffset_v1
    c_clockOffsetsInfo.type = ctype
    c_clockOffsetsInfo.pstate = pstate
    c_clockOffsetsInfo.clockOffsetMHz = c_int(offset)
    fn = pynvml._nvmlGetFunctionPointer("nvmlDeviceSetClockOffsets");
    ret = fn(device, byref(c_clockOffsetsInfo))
    pynvml._nvmlCheckReturn(ret)
    return ret

sys.stderr.write('ready\n')
while True:
    for line in sys.stdin:
        splits = line[:-1].split(' ')
        handle = nvmlDeviceGetHandleByIndex(int(splits[0]))
        if splits[1] == 'pl':
            try:
                nvmlDeviceSetPowerManagementLimit(handle, int(splits[2]))
                sys.stderr.write(str(NVML_SUCCESS) + '\n')
            except NVMLError as err:
                sys.stderr.write(str(err.value) + '\n')
        elif splits[1] == 'pm':
            try:
                nvmlDeviceSetPersistenceMode(handle, int(splits[2]))
                sys.stderr.write(str(NVML_SUCCESS) + '\n')
            except NVMLError as err:
                sys.stderr.write(str(err.value) + '\n')
        elif splits[1] == 'gpu':
            try:
                #DeviceSetClockOffsets(handle, 0, 0, splits[2])
                sys.stderr.write(str(NVML_SUCCESS) + '\n')
            except NVMLError as err:
                sys.stderr.write(str(err.value) + '\n')
        elif splits[1] == 'mem':
            try:
                #DeviceSetClockOffsets(handle, 2, 0, c_int(splits[2]))
                sys.stderr.write(str(NVML_SUCCESS) + '\n')
            except NVMLError as err:
                sys.stderr.write(str(err.value) + '\n')
        elif splits[1] == 'quit':
            nvmlShutdown()
            sys.stderr.write(str(NVML_SUCCESS) + '\n')
            exit()
